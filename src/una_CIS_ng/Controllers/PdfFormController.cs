using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml;
using iTextSharp.text;
using iTextSharp.text.html;
using iTextSharp.text.html.simpleparser;
using iTextSharp.text.pdf;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.AspNetCore.Mvc.ViewEngines;
using Microsoft.AspNetCore.Mvc.ViewFeatures;
using una_CIS_ng.Core;

namespace una_CIS_ng.Controllers
{
  public class PdfFormController : Controller
  {
    protected ICompositeViewEngine ViewEngine;

    public PdfFormController(ICompositeViewEngine viewEngine)
    {
      ViewEngine = viewEngine;
    }

    public IActionResult PermitApplicationRoW()
    {
      var htmlContent = RenderViewToString();

      return File(GenerateHtmlToPDFDocument(htmlContent), "application/pdf");
    }

    /// <summary>
    /// Generate PDF from HTML
    /// </summary>
    /// <param name="html"></param>
    /// <returns></returns>
    public byte[] GenerateHtmlToPDFDocument(string html)
    {
      var workStream = new MemoryStream();
      var pdfDoc = new Document(PageSize.A4);
      PdfWriter.GetInstance(pdfDoc, workStream).CloseStream = false;
      var parser = new HTMLWorker(pdfDoc);

      // Get chapter content
      var chapter = CreateChapterContent(html);

      pdfDoc.Open();

      // Add chapter content to PDF
      pdfDoc.Add(chapter);

      pdfDoc.Close();

      var byteInfo = workStream.ToArray();
      workStream.Write(byteInfo, 0, byteInfo.Length);
      workStream.Position = 0;

      // Generate TOC for existing content
      return GeneratePDFTOCContent(byteInfo, html);
    }

    /// <summary>
    /// Generate PDF To Content
    /// </summary>
    /// <param name="content"></param>
    /// <param name="html"></param>
    /// <returns></returns>
    public byte[] GeneratePDFTOCContent(byte[] content, string html)
    {
      var reader = new PdfReader(content);
      var sb = new StringBuilder();

      // Title of PDF
      sb.Append("<h2><strong style='text-align:center'>Demo for Load More Button in Kendo UI Grid</strong></h2><br>");

      // Begin to create TOC
      sb.Append("<table>");
      sb.Append(string.Format("<tr><td width='80%'><strong>{0}</strong></td><td align='right' width='10%'><strong>{1}</strong></td></tr>", "Section", "Page"));
      using (var ms = new MemoryStream())
      {
        // XML document generated by iText 
        SimpleBookmark.ExportToXML(SimpleBookmark.GetBookmark(reader), ms, "UTF-8", false);

        // rewind to create xmlreader
        ms.Position = 0;
        using (var xr = XmlReader.Create(ms))
        {
          xr.MoveToContent();

          const string format = @"<tr><td width='80%'>{0}</td><td align='right' width='10%'>{1}</td></tr>";

          // extract page number from 'Page' attribute 
          var re = new Regex(@"^\d+");
          while (xr.Read())
          {
            if (xr.NodeType != XmlNodeType.Element || xr.Name != "Title" || !xr.IsStartElement())
            {
              continue;
            }

            var page = re.Match(xr.GetAttribute("Page")).Captures[0].Value;
            xr.Read();

            if (xr.NodeType != XmlNodeType.Text)
            {
              continue;
            }

            var text = xr.Value.Trim();
            var pageSection = int.Parse(page) + 1;
            sb.Append(string.Format(format, text, pageSection));
          }
        }
      }
      sb.Append("</table>");

      var workStream = new MemoryStream();
      var document = new Document(reader.GetPageSizeWithRotation(1));
      var writer = PdfWriter.GetInstance(document, workStream);
      writer.CloseStream = false;

      document.Open();
      document.NewPage();

      // Add TOC
      var styles = new StyleSheet();
      styles.LoadTagStyle("h2", HtmlTags.HORIZONTALALIGN, "center");
      styles.LoadTagStyle("h2", HtmlTags.COLOR, "#F90");

      foreach (IElement element in HTMLWorker.ParseToList(new StringReader(sb.ToString()), styles))
      {
        document.Add(element);
      }

      // Append your chapter content again
      var chapter = CreateChapterContent(html);
      document.Add(chapter);

      document.Close();
      writer.Close();

      var byteInfo = workStream.ToArray();
      workStream.Write(byteInfo, 0, byteInfo.Length);
      workStream.Position = 0;

      return byteInfo;
    }

    /// <summary>
    /// Create chapter content from html
    /// </summary>
    /// <param name="html"></param>
    /// <returns></returns>
    public Chapter CreateChapterContent(string html)
    {
      // Declare a font to used for the bookmarks
      var bookmarkFont = FontFactory.GetFont(FontFactory.HELVETICA, 16, Font.NORMAL, new Color(255, 153, 0));

      var chapter = new Chapter(new Paragraph(""), 0) { NumberDepth = 0 };

      // Create css for some tag
      var styles = new StyleSheet();

      styles.LoadTagStyle("h2", HtmlTags.HORIZONTALALIGN, "center");
      styles.LoadTagStyle("h2", HtmlTags.COLOR, "#F90");
      styles.LoadTagStyle("pre", "size", "10pt");

      // Split H2 Html Tag
      var pattern = @"<\s*h2[^>]*>(.*?)<\s*/h2\s*>";
      var result = Regex.Split(html, pattern);

      // Create section title & content
      var sectionIndex = 0;
      foreach (var item in result)
      {
        if (string.IsNullOrEmpty(item)) continue;

        if (sectionIndex % 2 == 0)
        {
          chapter.AddSection(20f, new Paragraph(item, bookmarkFont), 0);
        }
        else
        {
          foreach (IElement element in HTMLWorker.ParseToList(new StringReader(item), styles))
          {
            chapter.Add(element);
          }
        }

        sectionIndex++;
      }

      chapter.BookmarkTitle = Constants.UnaAbbr + " " + Constants.CisAbbr;
      return chapter;
    }


    /// <summary>
    /// Render View to String
    /// </summary>
    /// <param name="viewName"></param>
    /// <returns></returns>
    protected string RenderViewToString(string viewName = null)
    {
      viewName = viewName ?? ControllerContext.ActionDescriptor.Name;
      ViewData.Model = null;
      //if (string.IsNullOrEmpty(viewName))
      //  viewName = ActionContext.ActionDescriptor.Name;

      using (var sw = new StringWriter())
      {
        var view = ViewEngine.FindView(ControllerContext, viewName, true).View;
        var viewContext = new ViewContext(ControllerContext, view, ViewData, TempData, sw, new HtmlHelperOptions());

        view.RenderAsync(viewContext).Wait();

        return sw.GetStringBuilder().ToString();
      }
    }
  }
}